{
  "entries": [
    {
      "search_terms": [
        "goto",
        "jump"
      ],
      "title": "Goto",
      "description": "Jump to a specific line in your code.",
      "syntax": "goto <number{1-20}>",
      "det_desc": "Goto is used to jump to a specific line during runtime. With goto, loops can easily be implemented as seen in the following examples.",
      "examples": [
        {
          "title": "Infinite loop",
          "code": "i = 0\ni++\ngoto 2",
          "description": "This loop will infinitely increase i by one (until an overflow-error occurs)"
        },
        {
          "title": "Finite loop",
          "code": "i = 0\nif i < 10 goto 3 end goto 4\ni++ goto 2",
          "description": "For each iteration this loop compares if i is smaller than 10 and increases i by one if this is the case."
        }
      ]
    },
    {
      "search_terms": [
        "if",
        "condition"
      ],
      "title": "If",
      "description": "Execute a block of code if expression is fulfilled.",
      "syntax": "if <condition> then <code> end",
      "det_desc": "An if clause is used to create more complex programs by introducing conditions. If a certain thing is given, then the program should do something - otherwise it shouldn't.",
      "examples": [
        {
          "title": "Finite loop",
          "code": "i = 0\nif i < 10 goto 3 end goto 4\ni++ goto 2",
          "description": "For each iteration this loop compares if i is smaller than 10 and increases i by one if this is the case - i won't be increased above 10."
        }
      ]
    },
    {
      "search_terms": [
        "if else",
        "condition"
      ],
      "title": "If else",
      "description": "Execute a block of code if expression is fulfilled, otherwise execute something else.",
      "syntax": "if <condition> then <code> else <code> end",
      "det_desc": "Adding to the standard if clause, the 'else' keyword adds another layer of customization to conditions.",
      "examples": [
        {
          "code": "thirsty = \"true\"\nif thirsty == \"true\" then milk = \"existent\" else milk = \"gone\" end",
          "description": "If thirsty is set to true, then set another field called milk to existent, otherwise to gone."
        }
      ]
    },
    {
      "search_terms": [
        "chipwait",
        "wait",
        "pause",
        "timeout"
      ],
      "title": "ChipWait",
      "description": "Wait a given amount of time when this field is set to something other than '0'.",
      "syntax": ":ChipWait = <number>",
      "det_desc": "In order to temporarily or permanently pause the execution of your YOLOL-chip you can use this field. Positive numbers will be treated as seconds in which the chip will remain paused, negative numbers will permanently stop the execution of that chip.",
      "examples": [
        {
          "code": ":ChipWait = 5\nhello = \"world!\"",
          "description": "The local variable 'hello' will only be set after the 5 seconds of chip-timeout."
        }
      ]
    },
    {
      "search_terms": [
        "+","-","/","*","%","+=","-=","/=","*=","%=",
        "modulo",
        "mathematics",
        "mathematical operators"
      ],
      "title": "Math operators",
      "description": "Operations performed on given numbers.",
      "syntax": "result {+=, -=, *=, /=, %=, =} <number> {+, -, *, /, % <number>}",
      "det_desc": "It's math, baby!\nIf you've never seen operators like `+=` worry not, the following examples should clear up most things.",
      "examples": [
        {
          "code": "result = 5 + 5",
          "description": "The local variable 'result' will be assigned the result of given addition - in this case 10. Analog for `-`, `*`, `/`, `%`."
        },
        {
          "code": "result = 5 + 5\nresult += 5",
          "description": "The local variable 'result' will first be set to 10 like above. Then `5` will be added <b>onto</b> the variable, resulting in 15. In short: The operation is immediately applied with a given number. Analog for `-=`, `*=`, `/=`, `%=`."
        }
      ]
    },
    {
      "search_terms": [
        "string operations",
        "operators",
        "+","-","+=","-=",
        "strings"
      ],
      "title": "String operators",
      "description": "Operations performed on given Strings.",
      "syntax": "result {+=, -=, =} <String> {+, - <String>}",
      "det_desc": "Adding or removing something to/from a String. If you've never seen operators like `+=` worry not, the following examples should clear up most things.\n\nUnlike with math operators, `ABS <String>`, `/=` or any other operator apart from adding or subtracting fulfill no other purpose than throwing errors - errors make the program skip the remaining line and jump to the next.",
      "examples": [
        {
          "title": "Adding Strings",
          "code": "result = \"Hello\" + \"World\"",
          "description": "The local variable 'result' will hold the value `HelloWorld`."
        },
        {
          "title": "Subtracting Strings",
          "code": "result = \"HelloWorldHelloWorld\" - \"World\"",
          "description": "The local variable 'result' will hold the value `HelloHelloWorld`. If you remove one String from another the program will always only delete the <b>first occurrence</b> of the part you're trying to remove."
        },
        {
          "code": "result = \"Hello\"\nresult += \"World\"",
          "description": "The local variable 'result' will hold the value `HelloWorld`. `+=` will apply the operator immediately with the given String and add it to the selected variable."
        }
      ]
    },
    {
      "search_terms": [
        "infinite loops",
        "while",
        "for"
      ],
      "title": "Loops",
      "description": "Finite and infinite loops like `for` and `while`.",
      "syntax": "Open for example code!",
      "det_desc": "Unlike other languages, YOLOL doesn't come with pre-defined loops. No simple `for` or `while` - we'll have to do that ourselves with the help of if's and goto's!",
      "examples": [
        {
          "title": "Infinite loop",
          "code": "i = 0\ni++ goto 2",
          "description": "For each iteration this loop increases `i` by one - i will increase until an overflow error occurs."
        },
        {
          "title": "Finite loop",
          "code": "i = 0\nif i < 10 goto 3 end goto 4\ni++ goto 2",
          "description": "For each iteration this loop compares if `i` is smaller than 10 and increases `i` by one if this is the case - `i` won't be increased above 10."
        }
      ]
    },
    {
      "search_terms": [
        "trigonometry",
        "trigonometric functions",
        "absolute value",
        "!", "factorial",
        "sine", "cosine", "tangent",
        "asine", "acosine", "atangent",
        "mathematics",
        "mathematical operators"
      ],
      "title": "Math operators +",
      "description": "All about SIN, COS, TAN, roots and exponents.",
      "syntax": "{SIN, COS, TAN, SQRT, ABS} <number>(^<number>)(!)",
      "det_desc": "More complex math for more complex things! With these functions you can calculate all sorts of things - Angles, distances or simply the root of 16.",
      "examples": [
        {
          "title": "Length of hypotenuse in a right triangle",
          "code": "# a &#9699; c\n#     b\nb = 4\nalpha = 30\nbeta = 180 - 90 - alpha\nc = b / SIN beta",
          "description": "Note: A triangle only has 180 degrees in total - a right triangle always has one angle of 90 degrees. With that and the single given angle we can easily calculate the missing angle and with that calculate the hypotenuse (c)."
        },
        {
          "title": "Absolute calculations",
          "code": "a = 2\nb = 3\nc = ABS (a - b)",
          "description": "`c` will hold `1`, even though `2 - 3 = -1`"
        },
        {
          "title": "Factorial calculations",
          "code": "a = 3!\nb = a!\nc = a! + b!",
          "description": "`a` will hold the result of `3 * 2 * 1 = 6`, `b` will hold the factorial of 6 (= 720) and `c` the result of 6 + 720."
        },
        {
          "title": "Uncovering the trooth",
          "code": "release = SQRT 16",
          "description": "`release` now holds the root that will answer all of our questions.."
        }
      ]
    },
    {
      "search_terms": [
        "increment",
        "decrement",
        "++",
        "--",
        "mathematics",
        "mathematical operators"
      ],
      "title": "Increments and decrements",
      "description": "Adding or removing 'one'.",
      "syntax": "{++, --}<number>{++, --}",
      "det_desc": "An increment `++` adds 'one' to a variable. A decrement `--` removes 'one' from a variable. One in this case is dependant on the type of the variable you want to in-/ decrement - a number will be in-/ decreased by `1`, a String will be appended an empty space or removed the last character.\n\nThere's also a big difference between using `++` and `--` before or after the field's name - learn more about <a href=\"https://www.geeksforgeeks.org/pre-increment-and-post-increment-in-c/\" target=\"_blank\">post- and pre-increments</a>.",
      "examples": [
        {
          "title": "Calculating String length",
          "code": "y = \"Hello World!\"\ny-- i++ y-- i++ y-- i++ y-- i++ y-- i++ y-- i++ y-- i++ y-- i++ goto 2",
          "description": "After this code 'terminated' `i` will hold the length of given String."
        }
      ]
    },
    {
      "search_terms": [
        "assignment",
        "comparison",
        "=="
      ],
      "title": "Assignments and comparisons",
      "description": "Difference between assignments (=) and comparisons (==) ",
      "syntax": "<number|String|variable> =(=) <number|String|variable>",
      "det_desc": "There's a big difference between a single `=` and `==`. The first is used for assignments - you assign a value to something. The latter is used for comparisons in which you check if something equals a certain value.",
      "examples": [
        {
          "title": "Assignment and comparison in action",
          "code": "i = 0\nif i == 5 then goto 2 end goto 3\ngoto 20\ni = i + 1",
          "description": "As long as i is not equal to 5 it will be increased. It won't be increased anymore if it reaches 5."
        }
      ]
    }
  ]
}
